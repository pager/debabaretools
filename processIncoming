#!/bin/bash

####################
#    Copyright (C) 2007, 2008 by Raphael Geissert <atomo64@gmail.com>
#
#    This file is part of DeBaBaReTools
#
#    DeBaBaReTools is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    DeBaBaReTools is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with DeBaBaReTools.  If not, see <http://www.gnu.org/licenses/>.
####################

if [ ! -z "$DEBUG" ] && [ "$DEBUG" ]; then
    set -x
fi

declare -r APP_NAME="processIncoming"
declare -r APP_VERSION="0.1"
set -e

if [ -f "/etc/DeBaBaReTools/common.conf" ]; then
        . /etc/DeBaBaReTools/common.conf
fi

if [ -f "$HOME/.DeBaBaReToolsrc" ]; then
        . "$HOME/.DeBaBaReToolsrc"
fi

if [ -f "/etc/DeBaBaReTools/$APP_NAME.conf" ]; then
	. /etc/DeBaBaReTools/$APP_NAME.conf
fi

if [ -f "$HOME/.${APP_NAME}rc" ]; then
        . "$HOME/.${APP_NAME}rc"
fi

. $BACKEND_DIR/probe.sh

# we first load the settings
probeFile "config"

cd "$BASE_DIR"

# afterwards we load the rest
probeFile "lock" "verbosity" "misc" "setDefault" "signature" "repository" "check" "parsers" "codenamesTable"

setDefault "LOCK_DIR" "$BASE_DIR"
setDefault "VERBOSE" "0"
setDefault "UPLOADQUEUE" "$BASE_DIR/pub/UploadQueue"
setDefault "INCOMING" "$BASE_DIR/incoming"
setDefault "ACCEPTED" "$INCOMING/accepted"
setDefault "NEW" "$INCOMING/new"
setDefault "NEW_POLICY" "binary"
setDefault "REJECTED" "$INCOMING/rejected"
setDefault "REJECTED_POLICY" "move"
setDefault "REJECTED_KEEP_CHANGES" "0"
setDefault "CHECK_SIGNATURE" "1"
setDefault "INSTALL" "0"
setDefault "KEYRING" "uploaders.gpg"

setLockFiles
lockApplication

if verbose; then
	sayHello
fi

#
# Process files in the UploadQueue directory (not yet accepted)
#

CURRENT="$(find "$UPLOADQUEUE" -maxdepth 1 -type f)"
if [ ! -z "$CURRENT" ]; then
	CURRENT_CHANGES="$(echo "$CURRENT" | egrep ".*\.changes$")"
else
	CURRENT_CHANGES=
fi

processChanges() {
	if shallUnlock; then
		checkUnlock
	fi

	local changes="${1:-}"

	if [ -z "$changes" ]; then
		return
	fi

	Say "Processing $changes..."

	if [ "$CHECK_SIGNATURE" -eq 1 ] && ! checkSign "$changes" "$KEYRING"; then
		Say "\tNo valid signature found"
		return
	fi

	getChangesEntry "$changes" "Distribution"

	if ! isDistroSupported "$DISTRIBUTION"; then
		Say "$(basename $changes) is for the unsupported $DISTRIBUTION distribution!"
		return
	fi

	changes="$(basename "$changes")"

	local es=0 output
	output="`(cd $UPLOADQUEUE; NOT_HUMAN=1 checkSums "$changes" VERBOSE )`" || es=$?
	if [ "$es" != "0" ]; then
		Say "$output"
		return
	fi

	local moveToNEW=0
	if [ "$NEW_POLICY" == "binary" ] && hasNewBin "$UPLOADQUEUE/$changes"; then
		moveToNEW=1
	fi

	# We are still here: signature, file size and md5sums are all fine
	# now let's  move the files to $ACCEPTED so they are processed by some other scripts
	local entry
	for entry in $output; do
		local filename="$(cut '-d|' -f2 <<< "$entry")"
		CURRENT="$(sed "s#$UPLOADQUEUE/$filename##" <<< "$CURRENT")"

		if [ $moveToNEW -gt 0 ]; then
			doNotOverwrite "$NEW/$filename"
			Say "mv'ing \"$UPLOADQUEUE/$filename\" to \"$NEW/\""
			mv "$UPLOADQUEUE/$filename" "$NEW/"
			return
		fi

		doNotOverwrite "$ACCEPTED/$filename"
		Say "mv'ing \"$UPLOADQUEUE/$filename\" to \"$ACCEPTED/\""
		mv "$UPLOADQUEUE/$filename" "$ACCEPTED/"
	done
}

for CHANGES in $CURRENT_CHANGES; do
	processChanges "$CHANGES"
done

if [ "$REJECTED_POLICY" == "kill" ]; then
	# Kill them all!
	if [ ! -z "$CURRENT" ]; then
		for f in $CURRENT; do
			Say "unlink'ing \"$f\""
			unlink "$f"
		done
	fi
elif [ "$REJECTED_POLICY" == "move" ]; then
	# Move them all!
	if [ ! -z "$CURRENT" ] && [ -d "$REJECTED" ]; then
		for f in $CURRENT; do

			if [ "$REJECTED_KEEP_CHANGES" = "0" ] && egrep "\.changes$" <<< "$f" > /dev/null; then
				Say "unlink'ing \"$f\""
				unlink "$f"
			fi

			Say "mv'ing \"$f\" to \"$REJECTED/\""
			doNotOverwrite "$REJECTED/$f"
			mv "$f" "$REJECTED/"
		done
	fi
else
	Say "Unknown REJECTED_POLICY: $REJECTED_POLICY, aborting"
	exit 1
fi

checkUnlock

if [ "$INSTALL" -gt 0 ]; then
	# Already ready-to-be-installed packages, as simple as this:
	installIncoming
fi

sayBye
unlockApplication
exit 0
