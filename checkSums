#!/bin/bash

####################
#    Copyright (C) 2007, 2008 by Raphael Geissert <atomo64@gmail.com>
#
#    This file is part of DeBaBaReTools
#
#    DeBaBaReTools is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    DeBaBaReTools is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with DeBaBaReTools.  If not, see <http://www.gnu.org/licenses/>.
####################

#
# Simple script that makes sure the md5sums specified in a .dsc/.changes file is ok
#
# NOT_HUMAN=1 is intended to be used by programs so it is easier for them to parse the output
# exit status code meanins are:
#  0: ok
#  1: no file was specified
#  2: some error while processing the file occured
#
# Not human message formats:
#  CODE|FILE[|REAL_VALUE|FILE_VALUE]
# Being | a separator of values instead of a logical OR
# CODE can be: 
#        FE (File doesn't Exist)
#        IF (Invalid Format)
#        SZ (SiZe check failed)
#        MD5 (MD5sum check failed)
#        OK (everything fine)
# FILE is the file name (either the input filename or one of the being-processed files)
# REAL_VALUE the real value for a check (e.g. real md5sum)
# FILE_VALUE the value specified by the .dsc/.changes file
#
# Note: OK messages (on NOT_HUMAN=1) are only displayed when VERBOSE is set
# 2nd note: when NOT_HUMAN= VERBOSE is enabled by default
# 3rd note: an OK message when NOT_HUMAN=1 and VERBOSE is set will be like OK|FILE|SIZE|MD5SUM
#

if [ ! -z "$DEBUG" ] && [ "$DEBUG" ]; then
	set -x
fi

set -e

if [ -z "$1" ]; then
    echo "Usage: $0 FILE.dsc|FILE.changes [NO|VERBOSE]"
    echo "Environment options: NOT_HUMAN=0|1 (default: 0)"
    exit 1
fi

# Now process options
VERBOSE=
if [ -z "$NOT_HUMAN" ]; then
    NOT_HUMAN=
    VERBOSE=1
else 
    if [ "$NOT_HUMAN" ]; then
        NOT_HUMAN="yes"
    else
        NOT_HUMAN=
        VERBOSE=1
    fi
fi

if [ ! -z "$2" ]; then
	if [ "$2" = "VERBOSE" ]; then
		VERBOSE="yes"
	elif [ "$2" = "NOVERBOSE" ]; then
		VERBOSE=
	fi
fi

# Lets process the file

if [ ! -f "$1" ]; then
    if [ $NOT_HUMAN ]; then
            echo "FE|$1"
    else
        echo "File $1 doesn't exist!"
    fi
    exit 2
fi

# detect format according to file extension:
if [ ! -z "$(echo $1 | egrep '\.changes$')" ]; then
    FORMAT=changes
elif [ ! -z "$(echo $1 | egrep '\.dsc$')" ]; then
    FORMAT=dsc
else
    if [ $NOT_HUMAN ]; then
            echo "IF|$1"
    else
        echo "File $1 is in an uncomprehensible format!"
    fi
    exit 2
fi

# $CONTENTS stores the file information listed in the .changes/.dsc file
CONTENTS=

case "$FORMAT" in
    changes)
	CONTENTS="$(egrep "^ [0-9a-f]{32} [0-9]+ [a-z0-9]+ [a-z]+ .*" "$1" | sed "s/ /|/g;")"
    ;;
    dsc)
	CONTENTS="$(egrep "^ [0-9a-f]{32} [0-9]+ .*" "$1" | sed "s/ /|/g;")"
    ;;
    *)
	echo "Unknown file format: $FORMAT" >&2
	exit 2
    ;;
esac

# nothing? this can't be a valid file
if [ -z "$CONTENTS" ]; then
    if [ $NOT_HUMAN ]; then
            echo "IF|$1"
    else
        echo "File $1 is in an uncomprehensible format!"
    fi
    exit 2
fi

for ENTRY in $CONTENTS; do
    
    if [ -z "$ENTRY" ]; then
        continue
    fi

    case "$FORMAT" in
	changes)
	    FILE="$(cut '-d|' -f6 <<< "$ENTRY")"
	;;
	dsc)
	    FILE="$(cut '-d|' -f4 <<< "$ENTRY")"
	;;
    esac

    FULL_PATH2FILE="$(readlink -f "$FILE")"

    SIZE="$(cut '-d|' -f3 <<< "$ENTRY")"
    MD5SUM="$(cut '-d|' -f2 <<< "$ENTRY")"
    
    if [ ! -f "$FULL_PATH2FILE" ]; then
        if [ $NOT_HUMAN ]; then
            echo "FE|$FILE"
        else
            echo "Couldn't find $FILE!"
        fi
        exit 2
    fi
    
    RSIZE="`du -b "$FULL_PATH2FILE" | awk "-F " '{ print $1 }'`"
    
    if [ "$RSIZE" != "$SIZE" ]; then
        if [ $NOT_HUMAN ]; then
            echo "SZ|$FILE|$RSIZE|$SIZE"
        else
            echo "Size of $FILE ($RSIZE) doesn't match $SIZE"
        fi
        exit 2
    fi
    
    RMD5SUM="$(md5sum "$FULL_PATH2FILE" | cut '-d ' -f1)";
    
    if [ "$RMD5SUM" != "$MD5SUM" ]; then
        if [ $NOT_HUMAN ]; then
            echo "MD5|$FILE|$RMD5SUM|$MD5SUM"
        else
            echo "MD5sum of $FILE ($RMD5SUM) doesn't match $MD5SUM"
        fi
        exit 2
    fi
    
    if [ $VERBOSE ]; then
        if [ $NOT_HUMAN ]; then
            echo "OK|$FILE|$RMD5SUM|$RSIZE"
        else
            echo "$FILE is ok!"
        fi
    fi
    
done

if [ $VERBOSE ]; then
    if [ $NOT_HUMAN ]; then
        echo "OK|$1"
    else
        echo "All files specified by $1 are ok! :)"
    fi
fi

exit 0
