#!/bin/sh

####################
#    Copyright (C) 2007 by Raphael Geissert <atomo64@gmail.com>
#
#    This file is part of DeBaBaReTools
#
#    DeBaBaReTools is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    DeBaBaReTools is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with DeBaBaReTools.  If not, see <http://www.gnu.org/licenses/>.
####################

## TODO: find a way to build when the source package is already installed in the repository
## TODO: ignore packages in failedToBuild.$DISTRO (should be manually removed from that file)

if [ ! -z "$DEBUG" ] && [ "$DEBUG" ]; then
    set -x
fi

declare -r APP_NAME="wannaBuild"
declare -r APP_VERSION="0.1"

if [ -f "/etc/DeBaBaReTools/common.conf" ]; then
        . /etc/DeBaBaReTools/common.conf
fi

if [ -f "$HOME/.DeBaBaReToolsrc" ]; then
        . "$HOME/.DeBaBaReToolsrc"
fi

if [ -f "/etc/DeBaBaReTools/$APP_NAME.conf" ]; then
	. /etc/DeBaBaReTools/$APP_NAME.conf
fi

if [ -f "$HOME/.${APP_NAME}rc" ]; then
        . "$HOME/.${APP_NAME}rc"
fi

. $BACKEND_DIR/probe.sh

# we first load the settings
probeFile "config"

cd "$BASE_DIR"

# afterwards we load the rest
probeFile "lock" "startup" "setDefault" "verbosity"

setDefault "LOCK_DIR" "$BASE_DIR"
setDefault "VERBOSE" "0"
setDefault "PBUILDER_CACHE" "/var/cache/pbuilder"
setDefault "BUILD_DIR" "$BASE_DIR/build"
setDefault "BUILD_DATA" "$BUILD_DIR/data"
setDefault "UPDATE_TGZ" "1"
setDefault "GAINROOT" "sudo"

lockApplication

if verbose; then
	sayHello
fi

set +e

for LIST in $BUILD_DATA/*; do
    if [ ! -f $LIST ]; then
        continue
    fi

    checkUnlock

    DISTRO="`echo "$LIST" | awk -F. '{ print $2 }'`"

    Say "Processing packages to be built for $DISTRO"

    if [ $UPDATE_TGZ -gt 0 ]; then
        Say "Executing pbuilder --update --basetgz ${PBUILDER_CACHE}/${DISTRO}.tgz"
        
        $GAINROOT pbuilder --update --basetgz ${PBUILDER_CACHE}/${DISTRO}.tgz > $BUILD_DIR/logs/${DISTRO}.update
    else
        Say "Not updating ${PBUILDER_CACHE}/${DISTRO}.tgz, as requested"
    fi

    for PACKAGE_L in `cat $LIST`; do
        S_PACKAGE="`echo "$PACKAGE_L" | awk '-F|' '{ print $1 }'`"
        Arch="`echo "$PACKAGE_L" | awk '-F|' '{ print $2 }'`"

	checkUnlock

        Say  "\tProcessing source package $S_PACKAGE"

        if [ "$Arch" != "${DEB_BUILD_ARCH}" ]; then
            Say  "\tIgnoring entry: $PACKAGE_L (not a good arch)"
            continue
        fi

        if [ ! -f "${ACCEPTED}/${S_PACKAGE}.dsc" ]; then
            Say "\tRemoving entry: $PACKAGE_L (file not found)"
            
            sed --in-place "s/${PACKAGE_L}//;" $BUILD_DATA/needsBuild.${DISTRO}
            sed --in-place "s/${S_PACKAGE}|all//;" $BUILD_DATA/needsBuild.${DISTRO}
            continue
        fi

        #BUILDOPTS="-a${DEB_BUILD_ARCH} -t${DEB_BUILD_GNU_TYPE} -b"
        BUILDOPTS=""
        PBUILDEROPTS=""
        BUILDALL=0

        #
        # Check whether we are building binary-arch or also include indep
        #
        if [ -z "`cat $LIST | grep "$S_PACKAGE|all"`" ]; then
            PBUILDEROPTS+=' --binary-arch'
        else
            BUILDALL=1
            Say "\t\tAlso going to build 'all'"
        fi

        #
        # Create a temp dir where the results are going to be placed after building
        # TODO: fix this thing!!! pdebuilder should be called
        RESULTSDIR=`mktemp -d -p $BUILD_DIR/ XXXXXXXXXXX` || exit 1

        Say "\t\tStarting pbuilder --build ${PBUILDEROPTS} --debbuildopts ${BUILDOPTS} --buildresult ${RESULTSDIR} --basetgz ${PBUILDER_CACHE}/${DISTRO}.tgz ${ACCEPTED}/${S_PACKAGE}.dsc"

        #
        # Finally build
        #  pdebuild/pbuilder options must be setup in the pbuilderrc file
        #
        $GAINROOT pbuilder --build ${PBUILDEROPTS} --debbuildopts "${BUILDOPTS}" --buildresult ${RESULTSDIR} --basetgz ${PBUILDER_CACHE}/${DISTRO}.tgz ${ACCEPTED}/${S_PACKAGE}.dsc > $BUILD_DIR/logs/$S_PACKAGE 2> $BUILD_DIR/logs/$S_PACKAGE.error

        #
        # Make sure we got something
        #

        if [ ! -f "${RESULTSDIR}/${S_PACKAGE}_${Arch}.changes" ]; then
            Say "\t\tCould not find ${RESULTSDIR}/${S_PACKAGE}_${Arch}.changes, build failed"
            
            echo "${PACKAGE_L}" >> $BUILD_DATA/failedToBuild.${DISTRO}
            sed --in-place "s/${PACKAGE_L}//;" $BUILD_DATA/needsBuild.${DISTRO}
            sed --in-place "s/${S_PACKAGE}|all//;" $BUILD_DATA/needsBuild.${DISTRO}
            continue
        fi

        FILES="`cat ${RESULTSDIR}/${S_PACKAGE}_${Arch}.changes | egrep "[0-9a-f]{32} [0-9]+ [a-z]+ [a-z]+ .*\.deb" | sed "s/ /|/g;"`"
        for FEntry in $FILES; do
            if [ -z "$FEntry" ]; then
                continue
            fi

            F="`echo "$FEntry" | awk '-F|' '{ print $6 }'`"

            Say "\t\tInstalling ${RESULTSDIR}/$F in $INCOMING/${DISTRO}/"

            mv ${RESULTSDIR}/$F $INCOMING/${DISTRO}/
        done

        Say "\t\tInstalling ${RESULTSDIR}/${S_PACKAGE}_${Arch}.changes in $INCOMING/${DISTRO}/"

        mv ${RESULTSDIR}/${S_PACKAGE}_${Arch}.changes $INCOMING/${DISTRO}/

        sed --in-place "s/${PACKAGE_L}//;" $BUILD_DATA/needsBuild.${DISTRO}
        sed --in-place "s/${S_PACKAGE}|all//;" $BUILD_DATA/needsBuild.${DISTRO}

        FilesInBuild="`ls ${RESULTSDIR}/*`"
        Say "\t\tCleaning results directory (${RESULTSDIR}):"

        for F in "$FilesInBuild"; do
            F="${RESULTSDIR}/${F}"
            Say "\t\trm -rf $F"
            rm -rf $F
        done
        rm -rf ${RESULTSDIR}

    done
done

unlockApplication
exit 0
