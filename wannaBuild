#!/bin/bash

####################
#    Copyright (C) 2007, 2008 by Raphael Geissert <atomo64@gmail.com>
#
#    This file is part of DeBaBaReTools
#
#    DeBaBaReTools is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    DeBaBaReTools is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with DeBaBaReTools.  If not, see <http://www.gnu.org/licenses/>.
####################

## TODO: find a way to build when the source package is already installed in the repository

if [ ! -z "$DEBUG" ] && [ "$DEBUG" ]; then
    set -x
fi

set -e

declare -r APP_NAME="wannaBuild"
declare -r APP_VERSION="0.1"

if [ -f "/etc/DeBaBaReTools/common.conf" ]; then
        . /etc/DeBaBaReTools/common.conf
fi

if [ -f "$HOME/.DeBaBaReToolsrc" ]; then
        . "$HOME/.DeBaBaReToolsrc"
fi

if [ -f "/etc/DeBaBaReTools/$APP_NAME.conf" ]; then
	. /etc/DeBaBaReTools/$APP_NAME.conf
fi

if [ -f "$HOME/.${APP_NAME}rc" ]; then
        . "$HOME/.${APP_NAME}rc"
fi

. $BACKEND_DIR/probe.sh

# we first load the settings
probeFile "config"

cd "$BASE_DIR"

# afterwards we load the rest
probeFile "lock" "verbosity" "misc" "setDefault" "build" "signature" "repository" "buildQueue" "codenamesTable" "fetch"

setDefault "LOCK_DIR" "$BASE_DIR"
setDefault "VERBOSE" "0"
setDefault "BUILD_DIR" "$BASE_DIR/build"
setDefault "BUILD_DATA" "$BUILD_DIR/data"
setDefault "BUILD_LOGS_DIR" "$BUILD_DATA/logs"
#ENV: SIGN: yes(default): require signature to upload (package is only built), no: upload as-is
#.(most likely unsigned), auto: auto-sign the .changes file (make sure it is all setup correctly for this)
setDefault "SIGN" "yes"
#ENV: SIGN_COMMAND: command used to sign the .changes file (only used when SIGN=auto), usually debsign (default)
setDefault "SIGN_COMMAND" "debsign"
#ENV: DEB_HOST_ARCH: architecture which the packages are going to be built for
#. (no magic is done for cross-building)
setDefault "DEB_HOST_ARCH" "$(dpkg-architecture -qDEB_HOST_ARCH)"
setDefault "BUILD_DATA_CACHE" "$BUILD_DIR/cache"
setDefault "KEYRING" "secring.gpg"
#ENV: UPDATE_ENVIRONMENT: 1(default): automagically update the build environment before building, 0: do nothing
setDefault "UPDATE_ENVIRONMENT" "1"
#ENV: GAINROOT: command (sudo by default) to gain root access for some not-build-time operations
#.(e.g. chroot, pbuilder)
setDefault "GAINROOT" "sudo"
setDefault "BUILD_ARCHALL" "1"
#ENV: DAEMON_MODE: no (default): don't act like a daemon, see if there is something to build
#. otherwise quit; yes: sleep, eat, and drink, but stay awake always looking for a job
setDefault "DAEMON_MODE" "no"
#ENV: DAEMON_SLEEP: default: 60s; the number of seconds or whatever is a good argument
#. for the 'sleep' command
setDefault "DAEMON_SLEEP" "60s"

setLockFiles
lockApplication

getSupportedRepDistros
setDefault "DISTROS_TO_BUILD" "$SUPPORTED_DISTROS"

if verbose; then
	sayHello
fi

ENTRY=

cleanup() {
    if [ -d "$workingDir" ]; then
	Say  "\tRemoving directory $workingDir..."
	rmdir --ignore-fail-on-non-empty "$workingDir"
    fi
    if [ ! -z "$ENTRY" ]; then
	buildQueue "$ENTRY" "$buildingForArchs" "gone"
    fi
}; trap cleanup EXIT

initBuildQueue

while true; do
for DISTRO in $DISTROS_TO_BUILD; do
	if ! isDistroSupported "$DISTRO"; then
		continue
	fi

	checkUnlock

	Say "Fetching list of packages to be built for $DISTRO"

	distroToCodename "$DISTRO"

	TOBUILD="$(getToBuild "$CODENAME" "$DEB_HOST_ARCH")"
	if [ "$BUILD_ARCHALL" -gt 0 ]; then
		TOBUILD+=" $(getToBuild "$CODENAME" "all")"
	fi

	for ENTRY in $TOBUILD; do
		checkUnlock

		buildingForArchs="$arch"

		parsePackageEntry "$ENTRY"

		buildQueue "$ENTRY" "$buildingForArchs" "requestLock" || continue

		Say  "\tFetching source package $package v$version"

		workingDir="$(mktemp -d -p "$BUILD_DIR" "${package}XXXXXX")"

		(cd "$workingDir"; fetchSource "$dscURI")

		buildQueue "$ENTRY" "$buildingForArchs" "fetched"

		dscName="$(basename "$dscURI")"

		cd "$workingDir"
    		    if ! output="$(checkSums "$dscName")"; then
	    		    Say "$output"
		    	    rm -rf "$workingDir"
    		    fi
		cd "$OLDPWD"

		if [ ! -f "$workingDir/$dscName" ]; then
			Say  "\tCouldn't find downloaded $dscName, fetch failed?"
			buildQueue "$ENTRY" "$arch" "fetch-failed"
			ENTRY=
			continue
		fi

		checkUnlock

		buildQueue "$ENTRY" "$buildingForArchs" "building"

		BUILD_TYPE=binary-arch

		# Check whether we are building binary-arch or also include indep
		if [ "$arch" != "all" ] && hasPendingArchAll "$CODENAME" "$ENTRY" \
					&& buildQueue "$ENTRY" "all" "requestLock"; then
			BUILD_TYPE=binary-all
			buildingForArchs+=" all"
			Say "\t\tAlso going to build 'all'"
		elif [ "$arch" = "all" ]; then
			BUILD_TYPE=binary-indep
		fi

		checkUnlock

		Say "\tStarting build backend..."
		#ENV: MAINTAINER: maintainer name used when building the package (must match the key used to sign)
		buildPackage "$dscName" "$BUILD_TYPE" "$workingDir" "$CODENAME" "$MAINTAINER"

		CHANGES="$(echo "$workingDir"/*.changes)"

		#
		# Make sure we got something
		#
		if [ ! -f $CHANGES ]; then
			Say "\t\tCould not find $CHANGES, build failed"
			buildQueue "$ENTRY" "$buildingForArchs" "failed"
			ENTRY=
			continue
		fi

		buildQueue "$ENTRY" "$buildingForArchs" "built"

		checkUnlock

		if [ "$SIGN" == "auto" ]; then
			Say "\t\tAuto-signing (as requested) $CHANGES..."
			if ! OUTPUT="$($SIGN_COMMAND "$CHANGES")"; then
				Say "$OUTPUT"
				ENTRY=
				continue
			fi
		elif [ "$SIGN" == "yes" ]; then
			Say "\t\tVerifying signature of $CHANGES..."
			if ! checkSign "$CHANGES" "$KEYRING"; then
				ENTRY=
				continue
			fi
		fi

		BUILD_LOG="$(echo "$workingDir"/*.build)"

		#
		# Make sure we got something
		#
		if [ ! -f "$BUILD_LOG" ]; then
			Say "\t\tCould not find $BUILD_LOG, build failed"
			buildQueue "$ENTRY" "$buildingForArchs" "failed"
			ENTRY=
			continue
		fi

		checkUnlock

		mv "$BUILD_LOG" "$BUILD_LOGS_DIR/"

		Say "\t\tTrying to upload $CHANGES..."

		wannaUpload "$CHANGES"

		buildQueue "$ENTRY" "$buildingForArchs" "uploaded"

		ENTRY=

		Say "\t\tCleaning results directory ($workingDir):"

		for F in "$workingDir"/*; do
			Say "\t\trm -rf $F"
			rm -rf "$F"
		done

		rmdir "$workingDir"
	done
done
# Stop after the first run if not in daemon mode
if [ "$DAEMON_MODE" == "yes" ]; then
    Say "\tThe daemon is sleeping for $DAEMON_SLEEP...\c"
    sleep "$DAEMON_SLEEP"
    Say "done"
else
    break
fi
done

shutdownBuildQueue
sayBye
unlockApplication
exit 0
